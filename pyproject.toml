[tool.poetry]
name = "lambda-handlers"
version = "0.0.1"
package-mode = false

[tool.poetry.dependencies]
python = "^3.13"
aws-lambda-powertools = {extras = ["tracer"], version = "^3.4.1"}
boto3 = "^1.36.2"

[tool.poetry.group.twilio.dependencies]
twilio = "^9.4.3"

[tool.poetry.group.dev.dependencies]
twilio = "^9.4.3"
ruff = "^0.11.0"
pyright = "^1.1.379"
pytest = "^8.3.2"
pytest-mock = "^3.14.0"
pytest-cov = ">=5,<7"
pytest-xdist = "^3.6.1"
types-aws-xray-sdk = "^2.14.0.20240606"
types-jmespath = "^1.0.2.20240106"
types-requests = "^2.32.0.20241016"
boto3-stubs = "^1.36.5"
twilio-stubs = "^0.2.0"
types-pygments = "^2.19.0.20250107"
types-colorama = "^0.4.15.20240311"
moto = "^5.0.27"

[tool.ruff]
line-length = 88
exclude = ["build"]
preview = true

[tool.ruff.lint]
select = [
  "F",      # Pyflakes (F)
  "E",      # pycodestyle error (E)
  "W",      # pycodestyle warning (W)
  "C90",    # mccabe (C90)
  "I",      # isort (I)
  "N",      # pep8-naming (N)
  "D",      # pydocstyle (D)
  "UP",     # pyupgrade (UP)
  "S",      # flake8-bandit (S)
  "B",      # flake8-bugbear (B)
  "C4",     # flake8-comprehensions (C4)
  "SIM",    # flake8-simplify (SIM)
  "ARG",    # flake8-unused-arguments (ARG)
  "PD",     # pandas-vet (PD)
  "PLC",    # Pylint convention (PLC)
  "PLE",    # Pylint error (PLE)
  "PLR",    # Pylint refactor (PLR)
  "PLW",    # Pylint warning (PLW)
  "FLY",    # flynt (FLY)
  "NPY",    # NumPy-specific rules (NPY)
  "PERF",   # Perflint (PERF)
  "FURB",   # refurb (FURB)
  "RUF",    # Ruff-specific rules (RUF)
  "YTT",    # flake8-2020 (YTT)
  # "ANN",    # flake8-annotations (ANN)
  "ASYNC",  # flake8-async (ASYNC)
  "BLE",    # flake8-blind-except (BLE)
  # "FBT",    # flake8-boolean-trap (FBT)
  "A",      # flake8-builtins (A)
  "COM",    # flake8-commas (COM)
  # "CPY",    # flake8-copyright (CPY)
  "DTZ",    # flake8-datetimez (DTZ)
  "T10",    # flake8-debugger (T10)
  "DJ",     # flake8-django (DJ)
  "EM",     # flake8-errmsg (EM)
  # "EXE",    # flake8-executable (EXE)
  # "FA",     # flake8-future-annotations (FA)
  "ISC",    # flake8-implicit-str-concat (ISC)
  "ICN",    # flake8-import-conventions (ICN)
  "LOG",    # flake8-logging (LOG)
  "G",      # flake8-logging-format (G)
  "INP",    # flake8-no-pep420 (INP)
  "PIE",    # flake8-pie (PIE)
  "T20",    # flake8-print (T20)
  "PYI",    # flake8-pyi (PYI)
  "PT",     # flake8-pytest-style (PT)
  "Q",      # flake8-quotes (Q)
  "RSE",    # flake8-raise (RSE)
  # "RET",    # flake8-return (RET)
  "SLF",    # flake8-self (SLF)
  "SLOT",   # flake8-slots (SLOT)
  "TID",    # flake8-tidy-imports (TID)
  "TCH",    # flake8-type-checking (TCH)
  "INT",    # flake8-gettext (INT)
  "PTH",    # flake8-use-pathlib (PTH)
  "TD",     # flake8-todos (TD)
  "FIX",    # flake8-fixme (FIX)
  "ERA",    # eradicate (ERA)
  "PGH",    # pygrep-hooks (PGH)
  "TRY",    # tryceratops (TRY)
  "FAST",   # FastAPI (FAST)
  "AIR",    # Airflow (AIR)
  "DOC"     # pydoclint (DOC)
]
ignore = [
  "B008",     # function-call-in-default-argument
  "A002",     # builtin-argument-shadowing
  "A004",     # builtin-import-shadowing
  "COM812",   # missing-trailing-comma
  "ISC001",   # single-line-implicit-string-concatenation
  "PIE790",   # unnecessary-placeholder
  "TRY003",   # raise-vanilla-args
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
  "D104",     # undocumented-public-package
]
"test/**.py" = [
  "D100",     # undocumented-public-module
  "D101",     # undocumented-public-class
  "D102",     # undocumented-public-method
  "D103",     # undocumented-public-function
  "S101",     # assert
  "PLC2701",  # import-private-name
  "SLF001",   # private-member-access
  "ARG001",   # unused-function-argument
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pyright]
typeCheckingMode = "strict"
exclude = ["build"]
threads = 0
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnknownArgumentType = false

[tool.pytest.ini_options]
addopts = [
  "--cov=src",
  "--cov-report=xml",
  "--cov-report=html",
  "--cov-report=term-missing",
  "--cov-branch",
  "--junitxml=junit/test-results.xml",
  "--doctest-modules",
  "--capture=no",
  "--numprocesses=auto"
]
pythonpath = ["src"]
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
minversion = "6.0"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
show_missing = true
fail_under = 0
exclude_lines = ["if TYPE_CHECKING:"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
